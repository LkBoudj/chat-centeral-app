// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int      @id @default(autoincrement()) @db.UnsignedInt
  userId            Int      @db.UnsignedInt
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  sessionToken String   @unique
  userId       Int      @db.UnsignedInt
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  user
  admin
}

model User {
  id                     Int                 @id @default(autoincrement()) @db.UnsignedInt
  name                   String?
  email                  String?             @unique
  password               String?
  emailVerified          DateTime?
  image                  String?
  status                 Boolean             @default(true)
  accounts               Account[]
  sessions               Session[]
  comments               Comment[]
  msgCounter             Int                 @default(0) @db.UnsignedInt
  messagesMax            Int?                @default(30) @db.UnsignedInt
  stripeCustomerId       String?             @unique
  stripeSubscriptionId   String?             @unique
  stripePriceId          String?             @unique
  SubscriptionExpirydate DateTime?
  conversationCreated    Conversation[]      @relation("conversaton_creator")
  conversationMember     Conversation[]      @relation("conversation_members")
  messages               Message[]
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  roles                  Role
  prompts                Prompt[]            @relation("creator")
  UsersLikerPrompts      UsersLikerPrompts[]
}

//DateTime 
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  title       String
  description String?
  user        User      @relation("conversaton_creator", fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @db.UnsignedInt
  users       User[]    @relation("conversation_members")
  photo       String?
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Technology {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  refTech     Int       @db.UnsignedInt
  name        String    @unique
  description Json?
  logo        String?
  status      Boolean?  @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  models      String?   @db.Text
  prompts     Prompt[]
  messages    Message[]
}

model Message {
  id             Int          @id @default(autoincrement()) @db.UnsignedInt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int          @db.UnsignedInt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int          @db.UnsignedInt
  fromMachin     Boolean?     @default(false)
  technology     Technology   @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  technologyId   Int          @db.UnsignedInt
  content        String?      @db.LongText
  media          Media[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Media {
  messageId Int      @id @unique @db.UnsignedInt
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  src       String   @db.LongText
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id              Int      @id @default(autoincrement()) @db.UnsignedInt
  title           String
  content         Json?
  price           Float
  scriptProductId String   @unique
  scriptPricetId  String   @unique
  messagesMax     Int      @default(20) @db.UnsignedMediumInt
  special         Boolean? @default(false)
  status          Boolean? @default(true)
  inHomePage      Boolean? @default(false)
  discount        Int?     @db.UnsignedMediumInt
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Prompt {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  title             String
  excerpt           String              @db.VarChar(60)
  technology        Technology?         @relation(fields: [technologyId], references: [id])
  user              User                @relation("creator", fields: [userId], references: [id], onDelete: Cascade)
  userId            Int                 @db.UnsignedInt
  license           License             @default(free)
  technologyId      Int?                @db.UnsignedInt
  content           String              @db.LongText
  image             String?
  comments          Comment[]
  tags              String?             @db.Text
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  UsersLikerPrompts UsersLikerPrompts[]
}

model UsersLikerPrompts {
  prompt   Prompt @relation(fields: [promptId], references: [id])
  promptId Int    @db.UnsignedInt
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @db.UnsignedInt

  @@id([promptId, userId])
}

model Tag {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @db.UnsignedInt
  content   String?  @db.LongText
  propmt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId  Int      @db.UnsignedInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum License {
  free
  premium
}
